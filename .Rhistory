install.packages("ggplot2")
library(ggplot2)
myHist <- function(mu){
mse <- mean(w*(x - mu)^2)
g <- ggplot(x, aes(x = child)) + geom_histogram(fill = "salmon", colour = "black", binwidth=1)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
myHist <- function(mu){
mse <- mean(w*(x - mu)^2)
g <- ggplot2(x, aes(x = child)) + geom_histogram(fill = "salmon", colour = "black", binwidth=1)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
myHist <- function(mu){
mse <- mean(w*(x - mu)^2)
g <- ggplot(x, aes(x = child)) + geom_histogram(fill = "salmon", colour = "black", binwidth=1)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
myHist <- function(mu){
mse <- mean(w*(x - mu)^2)
g <- ggplot2(x, aes(x = x)) + geom_histogram(fill = "salmon", colour = "black", binwidth=1)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
myHist <- function(mu){
mse <- mean(w*(x - mu)^2)
g <- ggplot(x, aes(x = x)) + geom_histogram(fill = "salmon", colour = "black", binwidth=1)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
?lm
lm(x, weights = w)
mu <- c(0.1471, 1.077, 0.0025, 0.300)
for (v in mu)
{print( c(v, sum(w*(x-v)^2)) )}
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(x~y)
data(mtcars)
lm(data$weight~data$mpg)
x <- c(x,x*-1)
y <- c(y,y*-1)
cor(x,y) *sd(y)/sd(x)
x <- mtcars$wt
y <- mtcars$mpg
cor(x,y) *sd(y)/sd(x)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
zx <- (x-mean(x)) / sd(x)
zx[1]
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(x~y)
b1 <- cor(x,y)*sd(y)/sd(x)
b0 <- mean(y) - b1 * mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
summary(lm(y~x))
fit <- lm(mpg ~ wt, mtcars)
sumcoef <- summary(fit)$coeficents
sumcoef
sumcoef <- summary(fit)$coefficents
sumcoef
summary(fit)
sumcoef <- summary(fit)$Coefficients
sumcoef
sumcoef <- summary(fit)$coefficients
sumcoef
beta0 <- sumcoef[1,1] + c(1,-1) * qt(.975, df = fit$df) * sumcoef[1,2]
beta1 <- sumcoef[2,1] + c(1,-1) * qt(.975, df = fit$df) * sumcoef[2,2]
q3<- beta0 + beta1*mean(mtcars$wt)
q3
newdata <- data.frame(x=c(mean(mtcars$wt)))
p1 <- predict(fit, newdata, interval = ("confidence"))
print(p1)
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y ~ x)
coef <- summary(fit)$coefficients
newdata <- data.frame(x=c(mean(x)))
p1 <- predict(fit, newdata, interval = ("confidence"))
print(p1)
coef
?predict
p2 <- predict(fit, 3000, interval = ("confidence"))
newdata <- data.frame(x=3000/1000)
p2 <- predict(fit, newdata, interval = ("prediction"))
print(p2)
install.packages("RMySQL")
library(RMySQL)
rm(list=ls())
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "56b637a5baffac62cad9",
secret = "8e107541ae1791259e9987d544ca568633da2ebf")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
github_token
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github",
key = "0300d2c2631163597dd2",
secret = "6ac82dba6f3b2f40d45547ec02dbc9991723c017")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
myapp <- oauth_app("github",
key = "0300d2c2631163597dd2",
secret = "6ac82dba6f3b2f40d45547ec02dbc9991723c017")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
myapp <- oauth_app("github",
key = "0300d2c2631163597dd2",
secret = "6ac82dba6f3b2f40d45547ec02dbc9991723c017")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
> req <- GET("https://api.github.com/rate_limit", gtoken)
> stop_for_status(req)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
install.package("httpuv")
install.package(httpuv)
install.packages("httpuv")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
rawdata <- content(req)
data1 <- jsonLite: :fromJSON(toJSON(rawdata)
data1 <- jsonLite :fromJSON(toJSON(rawdata)
)
data1 = jsonlite::fromJSON(toJSON(rawdata))
data1 = jsonlite::fromJSON(rawdata)
data1 = jsonlite::fromJSON(req)
data1 <- fromJSON(req)
data1 = jsonlite::toJSON(req)
data1 = jsonlite::toJSON(rawdata)
data2 = jsonlite::fromJSON(data1)
str(data2)
names(data2)
data2(datasharing == created_at)
data2[datasharing == created_at]
data2["datasharing" == created_at]
data2["datasharing" == "created_at"]
data3 <- data2["datasharing" == "created_at"
}
data3 <- data2["datasharing" == "created_at"]
data3
print(data3)
view(data3)
list(data3)
data2["data sharing" == "created_at"]
data2["data sharing" == "created_at", ]
data2[,"data sharing" == "created_at"]
data2[,data2["data sharing" == "created_at"]
]
data2[data2[,"data sharing" == "created_at"],]
time <- Sys.time()
time
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
require(rcharts)
install.packages("rcharts")
install.packages("rCharts")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.package("AppliedPredictiveModeling")
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
createDataPartition?
?
)
""
?createDataPartition
??createDataPartition
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("caret")
install.packages("caret")
install.packages("caret")
library(caret)
install.packages("caret")
require(caret)
install.packages("caret")
##plot1
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
##Formating to factors will make it easier to process later, Emissions is numerical
NEI[,1] <- as.factor(NEI[,1])
NEI[,2] <- as.factor(NEI[,2])
NEI[,3] <- as.factor(NEI[,3])
NEI[,5] <- as.factor(NEI[,5])
NEI[,6] <- as.factor(NEI[,6])
results <- aggregate(Emissions ~ year, FUN=sum, data=NEI)
setwd("C:/Coursera/DataScience/04_ExploratoryAnalysis/ExData_Plotting2")
##plot1
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
##Formating to factors will make it easier to process later, Emissions is numerical
NEI[,1] <- as.factor(NEI[,1])
NEI[,2] <- as.factor(NEI[,2])
NEI[,3] <- as.factor(NEI[,3])
NEI[,5] <- as.factor(NEI[,5])
NEI[,6] <- as.factor(NEI[,6])
results <- aggregate(Emissions ~ year, FUN=sum, data=NEI)
barplot(results$Emissions)
?plot
with(results, plot(year, Emissions,
main = "Total Emissions by Year",
xlab = "Year"
xlab = "Emissions"
))
with(results, plot(year, Emissions,
main = "Total Emissions by Year",
xlab = "Year",
xlab = "Emissions"
))
with(results, plot(year, Emissions,
type = "h"
main = "Total Emissions by Year",
xlab = "Year",
xlab = "Emissions"
))
with(results, plot(year, Emissions,
type = "h",
main = "Total Emissions by Year",
xlab = "Year",
xlab = "Emissions"
))
with(results, plot(year, Emissions,
type = "s",
main = "Total Emissions by Year",
xlab = "Year",
xlab = "Emissions"
))
with(results, plot(year, Emissions,
type = "l",
main = "Total Emissions by Year",
xlab = "Year",
ylab = "Emissions"
))
with(results, plot(year, Emissions,
type = "b",
main = "Total Emissions by Year",
xlab = "Year",
ylab = "Emissions"
))
barplot(results, main = "Total Emissions by Year", xlab = "Year", ylab = "Emissions"
))
barplot(results, main = "Total Emissions by Year", xlab = "Year", ylab = "Emissions"
)
?barplot
barplot(Emissions, main = "Total Emissions by Year", xlab = "Year", ylab = "Emissions")
barplot(results$Emissions, main = "Total Emissions by Year", xlab = "Year",
ylab = "Emissions", cex.names = c("1999", "2002", "2005", "2008")
)
barplot(results$Emissions, main = "Total Emissions by Year", xlab = "Year",
ylab = "Emissions", names.arg = c("1999", "2002", "2005", "2008")
)
results
barplot(results$Emissions, main = "Total Emissions by Year", xlab = "Year",
ylab = "Emissions", names.arg = c("1999", "2002", "2005", "2008"), horiz = T
)
barplot(results$Emissions, main = "Total Emissions by Year", xlab = "Year",
ylab = "Emissions (tons)", names.arg = c("1999", "2002", "2005", "2008")
)
barplot(results$Emissions, main = "Total Emissions by Year", xlab = "Year",
ylab = "Emissions (tons)", names.arg = c("1999", "2002", "2005", "2008"),
cex.names = .7
)
barplot(results$Emissions, main = "Total Emissions by Year", xlab = "Year",
ylab = "Emissions (tons)", names.arg = c("1999", "2002", "2005", "2008"),
cex.axis = .7
)
barplot(results$Emissions, main = "Total Emissions by Year", xlab = "Year",
ylab = "Emissions (tons)", names.arg = c("1999", "2002", "2005", "2008"),
cex.axis = .7, par(las=2)
)
lapply(results, class)
source('C:/Coursera/DataScience/04_ExploratoryAnalysis/ExData_Plotting2/plot1.R', echo=TRUE)
source('C:/Coursera/DataScience/04_ExploratoryAnalysis/ExData_Plotting2/plot1.R', echo=TRUE)
source('C:/Coursera/DataScience/04_ExploratoryAnalysis/ExData_Plotting2/plot1.R', echo=TRUE)
?subset
summary(NEI)
subset1 <- subset(NEI, NEI$fips == "24510")
summary(subset1)
source('C:/Coursera/DataScience/04_ExploratoryAnalysis/ExData_Plotting2/plot2.R', echo=TRUE)
source('C:/Coursera/DataScience/04_ExploratoryAnalysis/ExData_Plotting2/plot2.R', echo=TRUE)
?aggregate
results <- aggregate(Emissions, by = list(year, type), FUN=sum, data=NEI)
results <- aggregate(Emissions ~ year + type, FUN=sum, data=NEI)
results
results <- aggregate(Emissions ~ type + year , FUN=sum, data=NEI)
results
?ggplot
library ggplot2
library(ggplot2)
?ggplot
require(ggplot)
ggplot(results)
?ggplot
?geom_bar
ggplot(results, aes(type, Emissions)) +
geom_bar(aes(fill = year), position = "dodge", stat="identity")
source('C:/Coursera/DataScience/04_ExploratoryAnalysis/ExData_Plotting2/plot3.R', echo=TRUE)
SCC
summary(SCC)
SCC[SCC[,1] == "10100101”,]
]
}
""
aet;mh;we
b
<
<_
=
`
````{}}P
fuck you
head
SCCCCCC
>>>>>>
......
.....
.....
View(SCC)
View(SCC)
+++++
}}}}}}}
head(SCC)
summary(SC)
summary(SCC)
summary(NEI)
head(SCC)
SCC[, c(1,4:9)]
summary(SCC)
s <- summary(SCC)
s$EI.Sector
s
unique(SCC[,4])
unique(SCC[,4:8])
unique(SCC[,4])
SCC[SCC[,4] == "Fuel Comb - Electric Generation - Coal",]
SCC[SCC[,4] == "Fuel Comb - Electric Generation - Coal",1]
summary(NEI)
input1 <- NEI[NEI$SCC %in% SCC[grep("Coal", SCC$EI.Sector), 1], ]
##subset NEI by all SCC codes pulled from code book that cotain coal in the dicription.
input2 <- SCC[, c(1, 4)]
##becuase of multiple SCC codes per name of coal activity will join that name
final <- merge(input1, input2, by.x = "SCC", by.y = "SCC")
head(final)
source('C:/Coursera/DataScience/04_ExploratoryAnalysis/ExData_Plotting2/plot4.R', echo=TRUE)
source('C:/Coursera/DataScience/04_ExploratoryAnalysis/ExData_Plotting2/plot4.R', echo=TRUE)
ggplot(final, aes(year, Emissions)) +
geom_bar(aes(fill = EI.Sector), position = "dodge", stat="identity")
source('C:/Coursera/DataScience/04_ExploratoryAnalysis/ExData_Plotting2/plot4.R', echo=TRUE)
input1 <- NEI[NEI$SCC %in% SCC[grep("Mobile", SCC$EI.Sector), 1], ]
##subset NEI by all SCC codes pulled from code book that contains Mobile
input2 <- SCC[, c(1, 4)]
##becuase of multiple SCC codes per name of Mobile activity we'll join that name
input3 <- merge(input1, input2, by.x = "SCC", by.y = "SCC")
narrow <- input3[, c(4, 6, 7)]
##narrow down to the columns we need
subset1 <- subset(narrow, narrow$fips == "24510")
##limit analysis to only our fips code
png("plot5.png", width=480, height=480)
ggplot(subset1, aes(year, Emissions)) +
geom_bar(aes(fill = EI.Sector), position = "dodge", stat="identity")
dev.off()
subset
subset1
narrow
source('C:/Coursera/DataScience/04_ExploratoryAnalysis/ExData_Plotting2/plot5.R', echo=TRUE)
narrow
subset1
head(input3)
narrow <- input3[, c(4, 6, 7)]
head(narrow)
ggplot(subset1, aes(year, Emissions)) +
geom_bar(aes(fill = EI.Sector), position = "dodge", stat="identity")
source('C:/Coursera/DataScience/04_ExploratoryAnalysis/ExData_Plotting2/plot5.R', echo=TRUE)
source('C:/Coursera/DataScience/04_ExploratoryAnalysis/ExData_Plotting2/plot5.R', echo=TRUE)
unique(narrow[,3])
source('C:/Coursera/DataScience/04_ExploratoryAnalysis/ExData_Plotting2/plot5.R', echo=TRUE)
?ggplot
source('C:/Coursera/DataScience/04_ExploratoryAnalysis/ExData_Plotting2/plot6.R', echo=TRUE)
source('C:/Coursera/DataScience/04_ExploratoryAnalysis/ExData_Plotting2/plot6.R', echo=TRUE)
source('C:/Coursera/DataScience/04_ExploratoryAnalysis/ExData_Plotting2/plot6.R', echo=TRUE)
source('C:/Coursera/DataScience/04_ExploratoryAnalysis/ExData_Plotting2/plot6.R', echo=TRUE)
source('C:/Coursera/DataScience/04_ExploratoryAnalysis/ExData_Plotting2/plot6.R', echo=TRUE)
?multiplot
source('C:/Coursera/DataScience/04_ExploratoryAnalysis/ExData_Plotting2/plot6.R', echo=TRUE)
source('C:/Coursera/DataScience/04_ExploratoryAnalysis/ExData_Plotting2/plot6.R', echo=TRUE)
final2
head(final2)
summary(final2)
?geom_bar
source('C:/Coursera/DataScience/04_ExploratoryAnalysis/ExData_Plotting2/plot6.R', echo=TRUE)
source('C:/Coursera/DataScience/04_ExploratoryAnalysis/ExData_Plotting2/plot6.R', echo=TRUE)
ggplot(input6, aes(fips, Emissions)) +
geom_bar(aes(fill = year,), position = "dodge", stat="identity") +
facet_wrap(~ EI.Sector, nrow=1) +
ggtitle("Baltimore City vs. Los Angeles County")
source('C:/Coursera/DataScience/04_ExploratoryAnalysis/ExData_Plotting2/plot6.R', echo=TRUE)
source('C:/Coursera/DataScience/04_ExploratoryAnalysis/ExData_Plotting2/plot6.R', echo=TRUE)
ggplot(input6, aes(year, Emissions)) +
geom_bar(aes(fill = EI.Sector,), position = "dodge", stat="identity") +
facet_wrap(~ fips, nrow=1) +
ggtitle("Baltimore City vs. Los Angeles County")
summarry input 6
summary(input6)
source('C:/Coursera/DataScience/04_ExploratoryAnalysis/ExData_Plotting2/plot6.R', echo=TRUE)
source('C:/Coursera/DataScience/04_ExploratoryAnalysis/ExData_Plotting2/plot6.R', echo=TRUE)
setwd("C:/Coursera/DataScience/09_DevelopingDataProducts/Project")
install.packages("shiny")
library(shiny)
runapp()
runApp()
runapp()
runApp()
runApp()
runApp()
?numericInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?verbatimTextOutput
?numericalOutput
?numericOutput
runApp()
runApp()
runApp()
?sum
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='kyle7day',
token='890BDF014B86CD661E634508E037055C',
secret='<SECRET>')
devtools::install_github('rstudio/shinyapps')
require"RCurl"
require("RCurl")
install.packages("RCurl")
install.packages("RCurl")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='kyle7day',
token='890BDF014B86CD661E634508E037055C',
secret='<SECRET>')
shinyapps::setAccountInfo(name='kyle7day',
token='890BDF014B86CD661E634508E037055C',
secret='dFhW5h/HZhI6O7Bpv0XM6BPTf2BeehKpmqFtweJO')
getwd()
shinyapps::deployApp('C:/Coursera/DataScience/09_DevelopingDataProducts/Project')
shinyapps::deployApp('C:/Coursera/DataScience/09_DevelopingDataProducts/Project')
shinyapps::deployApp('C:/Coursera/DataScience/09_DevelopingDataProducts/Project')
